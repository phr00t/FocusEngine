<!-- Build file post-included by all Xenko projects -->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Add Default targets used by Msbuild for undefined Platforms / or when skipping compilation under a platform -->
  <Target Name="Build"/>
  <Target Name="Clean"/>
  <Target Name="ReBuild"/>
  <Target Name="Publish"/>
  <Target Name="GetTargetPath"/>
  <Target Name="GetNativeManifest"/>
  <Target Name="GetPackagingOutputs"/>

  <!--Import Local Post Settings for the solution being loaded -->
  <Import Project="$(SolutionDir)$(SolutionName).Build.targets" Condition="Exists('$(SolutionDir)$(SolutionName).Build.targets')" />
  <Import Project="$(SolutionDir)Xenko.Core.Build.targets" Condition="Exists('$(SolutionDir)Xenko.Core.Build.targets')" />

  <!-- Workaround: GetPackagingOutputs from UWP (uap) try to build ProjectReference with current TFM, and that's the only way I could find to skip it -->
  <Target Name="_XenkoRemoveTargetFrameworkBeforeGetPackagingOutputs" BeforeTargets="GetPackagingOutputs">
    <ItemGroup>
      <ProjectReferenceWithConfiguration>
        <UndefineProperties>%(ProjectReferenceWithConfiguration.UndefineProperties);TargetFramework</UndefineProperties>
      </ProjectReferenceWithConfiguration>
    </ItemGroup>
  </Target>

  <!-- Include platform dependent assembly when specified -->
  <Choose>
    <When Condition="'$(XenkoPlatformDependent)' == 'true'">
      <Choose>
        <When Condition=" '$(XenkoPlatform)' == 'Android'">
          <ItemGroup>
            <Reference Include="Mono.Android" />
          </ItemGroup>
        </When>
        <When Condition=" '$(XenkoPlatform)' == 'iOS'">
          <ItemGroup>
            <Reference Include="Xamarin.iOS" />
          </ItemGroup>
        </When>
      </Choose>
    </When>
  </Choose>

  <!-- Code Analysis -->
  <PropertyGroup Condition="'$(XenkoCodeAnalysis)' == 'true'">
    <CodeAnalysisRuleSet>$(MSBuildThisFileDirectory)Xenko.ruleset</CodeAnalysisRuleSet>
    <!--<TreatWarningsAsErrors>true</TreatWarningsAsErrors>-->
  </PropertyGroup>
  <ItemGroup Condition="'$(XenkoCodeAnalysis)' == 'true'">
    <AdditionalFiles Include="$(MSBuildThisFileDirectory)stylecop.json" />
    <PackageReference Include="StyleCop.Analyzers" Version="1.1.0-beta008" PrivateAssets="All" />
  </ItemGroup>
  <!-- Disable analyzers unless XenkoEnableCodeAnalysis is set (note: PackageReference can't depend on external Condition) -->
  <Target Name="DisableAnalyzersForXenkoBuild"
        BeforeTargets="CoreCompile"
        Condition="'$(XenkoEnableCodeAnalysis)' != 'true'">
    <ItemGroup>
      <Analyzer Remove="@(Analyzer)"/>
    </ItemGroup>
  </Target>

  <!-- docfx doesn't like if there is no TargetFramework set by default -->
  <PropertyGroup Condition="'$(XenkoBuildDoc)' == 'true'">
    <TargetFramework Condition="'$(TargetFramework)' == ''">$(TargetFrameworks.Split(';', StringSplitOptions.RemoveEmptyEntries)[0])</TargetFramework>
  </PropertyGroup>  

  <!-- Setup compiler targets per platform / language -->
  <PropertyGroup>
    <!-- On Android, everything is library (even Exe) -->
    <OutputType Condition=" '$(XenkoPlatform)' == 'Android' ">Library</OutputType>
  </PropertyGroup>

  <!-- User Documentation (.usrdoc) -->
  <PropertyGroup Condition="'$(XenkoPublicApi)' == 'true'">
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.usrdoc</AllowedOutputExtensionsInPackageBuildOutputFolder>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);_XenkoRegisterUserDocOutputs</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>
  <Target Name="_XenkoRegisterUserDocOutputs">
    <ItemGroup Condition="Exists('$(OutputPath)$(AssemblyName).usrdoc')">
      <BuildOutputInPackage Include="$(OutputPath)$(AssemblyName).usrdoc"/>
    </ItemGroup>
  </Target>
  <Target Name="_XenkoRegisterUserDocReferenceRelatedFileExtensions" Condition="'$(XenkoPublicApi)' == 'true'" BeforeTargets="ResolveAssemblyReferences">
    <PropertyGroup>
      <AllowedReferenceRelatedFileExtensions>$(AllowedReferenceRelatedFileExtensions);.usrdoc</AllowedReferenceRelatedFileExtensions>
    </PropertyGroup>
  </Target>

  <PropertyGroup>
    <XenkoCompilerTargetsEnable Condition=" '$(XenkoPlatform)' != 'Windows' and $(XenkoWindowsOnly) == 'true'">false</XenkoCompilerTargetsEnable>

    <!-- Skip unit tests if requested -->
    <XenkoCompilerTargetsEnable Condition="'$(XenkoSkipUnitTests)' == 'true' And $(XenkoOutputFolder.StartsWith('Tests'))">false</XenkoCompilerTargetsEnable>

    <!-- If XenkoCompilerTargetsEnable is set to false, override LanguageTargets to an empty one -->
    <LanguageTargets Condition="'$(XenkoCompilerTargetsEnable)' == 'false'">$(MSBuildThisFileDirectory)Xenko.Core.DisableBuild.targets</LanguageTargets>

    <XenkoAssemblyProcessorFramework>netstandard2.0</XenkoAssemblyProcessorFramework>
    <XenkoAssemblyProcessorExt>.dll</XenkoAssemblyProcessorExt>
    <XenkoAssemblyProcessorHash Condition="'$(XenkoAssemblyProcessorBasePath)' != ''">$([System.IO.File]::ReadAllText('$(XenkoAssemblyProcessorBasePath)\$(XenkoAssemblyProcessorFramework)\Xenko.Core.AssemblyProcessor.Packed$(XenkoAssemblyProcessorExt).hash'))</XenkoAssemblyProcessorHash>
    <XenkoAssemblyProcessorTempBasePath Condition="'$(XenkoAssemblyProcessorBasePath)' != ''">$(TEMP)\Xenko\AssemblyProcessor\$(XenkoAssemblyProcessorHash)\$(XenkoAssemblyProcessorFramework)\</XenkoAssemblyProcessorTempBasePath>
    <XenkoAssemblyProcessorTempPath Condition="'$(XenkoAssemblyProcessorBasePath)' != ''">$(XenkoAssemblyProcessorTempBasePath)Xenko.Core.AssemblyProcessor.Packed$(XenkoAssemblyProcessorExt)</XenkoAssemblyProcessorTempPath>
  </PropertyGroup>

  <!-- Setup default output path for C++ projects -->
  <PropertyGroup>
    <OutputPath Condition="'$(XenkoProjectType)' == 'Cpp'">$(OutDir)</OutputPath>
    <IntermediateOutputPath Condition="'$(XenkoProjectType)' == 'Cpp'">$(IntDir)</IntermediateOutputPath>
  </PropertyGroup>

  <!-- C++ doesn't auto-import language targets -->
  <Import Condition="'$(XenkoProjectType)' == 'Cpp' And '$(XenkoCompilerTargetsEnable)' != 'false'" Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />

  <!-- Assembly Processor -->
  <UsingTask TaskName="AssemblyProcessorTask" AssemblyFile="$(XenkoAssemblyProcessorTempPath)" Condition=" '$(XenkoAssemblyProcessorTempPath)' != '' And '$(XenkoAssemblyProcessorDev)' != 'true' "/>
  <Target Name="RunXenkoAssemblyProcessor" BeforeTargets="CopyFilesToOutputDirectory" Condition=" '$(XenkoAssemblyProcessor)' == 'true' and '$(XenkoAssemblyProcessorTempPath)' != '' and '$(XenkoAssemblyProcessorGlobal)' == 'true' and '$(XenkoAssemblyProcessorOptions)' != '' ">
    <PropertyGroup>
      <!-- Add Xenko.Core path to assembly search directory -->
      <XenkoAssemblyProcessorOptions Condition="'$(XenkoCoreAssemblyPath)' != ''">$(XenkoAssemblyProcessorOptions) --assembly="$(XenkoCoreAssemblyPath)"</XenkoAssemblyProcessorOptions>
    </PropertyGroup>

    <WriteLinesToFile File="$(IntermediateOutputPath)XenkoReferences.cache" Lines="@(ReferencePath)" Overwrite="true" />

    <!--Add platform and target framework to assembly processor options-->
    <PropertyGroup>
      <XenkoAssemblyProcessorOptions>--platform=$(XenkoPlatform) --targetFramework=$(TargetFrameworkVersion) $(XenkoAssemblyProcessorOptions)</XenkoAssemblyProcessorOptions>
      <XenkoAssemblyProcessorOptions>$(XenkoAssemblyProcessorOptions) --references-file="$(IntermediateOutputPath)XenkoReferences.cache"</XenkoAssemblyProcessorOptions>
      <XenkoAssemblyProcessorOptions Condition="'$(AssemblyOriginatorKeyFile)' != ''">$(XenkoAssemblyProcessorOptions) --signkeyfile="$(AssemblyOriginatorKeyFile)"</XenkoAssemblyProcessorOptions>
      <XenkoAssemblyProcessorOptions Condition="'$(DocumentationFile)' != ''">$(XenkoAssemblyProcessorOptions) --docfile="$(DocumentationFile)"</XenkoAssemblyProcessorOptions>
      <XenkoAssemblyProcessorOptions>$(XenkoAssemblyProcessorOptions) --Werror</XenkoAssemblyProcessorOptions>
      <XenkoAssemblyProcessorOptions>$(XenkoAssemblyProcessorOptions) "$(IntermediateOutputPath)$(TargetName)$(TargetExt)"</XenkoAssemblyProcessorOptions>
    </PropertyGroup>

    <!-- Copy task to temp directory (otherwise MSBuild lock the task file and we can't reinstall package in dev mode) -->
    <ItemGroup>
      <XenkoAssemblyProcessorFilesToCopy Include="$(XenkoAssemblyProcessorBasePath)$(XenkoAssemblyProcessorFramework)\*.*" />
    </ItemGroup>
    <Copy SourceFiles="@(XenkoAssemblyProcessorFilesToCopy)" DestinationFolder="$(XenkoAssemblyProcessorTempBasePath)" Condition="!Exists('$(XenkoAssemblyProcessorTempPath)')" />

    <!-- Run assembly processor -->
    <Message Importance="High" Text="&quot;$(XenkoAssemblyProcessorTempPath)&quot; $(XenkoAssemblyProcessorOptions)"/>
    <AssemblyProcessorTask Condition=" '$(XenkoAssemblyProcessorDev)' != 'true' " Arguments="$(XenkoAssemblyProcessorOptions)"/>
    <!-- Dev mode: don't use task to avoid locking the file -->
    <Exec Condition=" '$(XenkoAssemblyProcessorDev)' == 'true' " Command="&quot;$(XenkoAssemblyProcessorTempPath)&quot; $(XenkoAssemblyProcessorOptions)"/>

    <!-- Copy User Documentation (.usrdoc) file to output -->
    <Copy
      Condition="'$(XenkoPublicApi)' == 'true' And Exists('%(RelativeDir)%(Filename).usrdoc')"
      SourceFiles="@(DocFileItem->'%(RelativeDir)%(Filename).usrdoc')"
      DestinationFolder="$(OutDir)"
      SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
      Retries="$(CopyRetryCount)"
      RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
      UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
      UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
    >
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
  </Target>

  <Import Project="$(MSBuildThisFileDirectory)Xenko.Core.Sign.targets" />
  <Import Project="$(MSBuildThisFileDirectory)Xenko.Core.PostSettings.Dependencies.targets"/>
  <Import Condition="'$(XenkoNativeOutputName)' != ''" Project="$(MSBuildThisFileDirectory)..\native\Xenko.Native.targets" />

  <!-- Workaround for https://github.com/dotnet/project-system/issues/6227 (UpToDateCheck: always fail if projects.assets.json is updated) -->
  <Target Name="_GenerateCompileInputsProjectAssets" AfterTargets="_GenerateCompileInputs">
    <ItemGroup>
      <CustomAdditionalCompileInputs Include="$(ProjectAssetsFile)" />
    </ItemGroup>
  </Target>

  <!-- Auto NuGet build packages and deploy them -->
  <Target Name="XenkoAutoPackDeploy" AfterTargets="Pack">
    <Copy Condition="'%(Extension)' == '.nupkg'" SourceFiles="@(NuGetPackOutput)" DestinationFolder="$(LocalAppData)\Xenko\NugetDev"/>
    <!-- Deleting .sha512 file and/or .nupkg.metadata seems to be enough for NuGet restore to force extract new package and properly compile dependent projects -->
    <Delete Files="$(NuGetPackageRoot)\$(PackageId.ToLowerInvariant())\$(PackageVersion)\$(PackageId).$(PackageVersion).nupkg.sha512"/>
    <Delete Files="$(NuGetPackageRoot)\$(PackageId.ToLowerInvariant())\$(PackageVersion)\.nupkg.metadata"/>
  </Target>
  <PropertyGroup Condition="$(DesignTimeBuild) != 'true' And '$(XenkoSkipAutoPack)' != 'true'">
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>.so;.a;.bin;.dylib;$(AllowedOutputExtensionsInPackageBuildOutputFolder)</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>

  <!-- Auto NuGet build packages and deploy them -->
  <Import Project="$(MSBuildThisFileDirectory)Xenko.AutoPack.targets"/>

  <!-- Generate localization satellite assemblies -->
  <Target Name="XenkoGenerateLocalizationSatelliteDlls" BeforeTargets="SatelliteDllsProjectOutputGroup" Returns="@(SatelliteDllsProjectOutputGroupOutput)" Condition="'$(XenkoLocalized)' == 'true' And '$(Configuration)' == 'Release'">
    <ItemGroup>
      <!-- Current list of languages to try to generate -->
      <XenkoTraductions Include="fr;ja;es;de;ru;it;ko"/>
      <XenkoTraductions Include="zh-Hans">
        <Source>zh_HANS-CN</Source>
      </XenkoTraductions>

      <_XenkoTraductions Include="@(XenkoTraductions)">
        <Source Condition="%(XenkoTraductions.Source) == ''">%(XenkoTraductions.Identity)</Source>
      </_XenkoTraductions>
    </ItemGroup>
    <Message Importance="High" Text="Generating traduction for %(_XenkoTraductions.Identity) %(_XenkoTraductions.SourceFolder)"/>
    <Exec Condition="Exists('$(SolutionDir)..\sources\localization\%(_XenkoTraductions.Source)\$(TargetName).%(_XenkoTraductions.Source).po')" Command="Path=$(RoslynTargetsPath);$(Path)
&quot;$(SolutionDir)..\deps\Gettext.Net\GNU.Gettext.Msgfmt.exe&quot; --lib-dir &quot;$(SolutionDir)..\deps\Gettext.Net&quot; --resource $(TargetName) -d &quot;$(TargetDir).&quot; --locale %(_XenkoTraductions.Identity) &quot;$(MSBuildThisFileDirectory)..\localization\%(_XenkoTraductions.Source)\$(TargetName).%(_XenkoTraductions.Source).po&quot; --verbose" />
    <ItemGroup>
      <SatelliteDllsProjectOutputGroupOutputIntermediate Include="$(OutDir)%(_XenkoTraductions.Identity)\$(TargetName).Messages.resources.dll" Condition="Exists('$(OutDir)%(_XenkoTraductions.Identity)\$(TargetName).Messages.resources.dll')">
        <TargetPath>%(_XenkoTraductions.Identity)\$(TargetName).Messages.resources.dll</TargetPath>
        <Culture>%(_XenkoTraductions.Identity)</Culture>
      </SatelliteDllsProjectOutputGroupOutputIntermediate>
    </ItemGroup>
  </Target>

  <Target Name="_XenkoSetFinalOutputPathOnBuildOutputFiles" AfterTargets="_GetBuildOutputFilesWithTfm">
    <ItemGroup>
      <BuildOutputInPackage Update="@(BuildOutputInPackage)" Condition="'%(BuildOutputInPackage.FinalOutputPath)' == ''">
        <FinalOutputPath>$([System.IO.Path]::Combine('$(MSBuildProjectDirectory)', '%(BuildOutputInPackage.FullPath)'))</FinalOutputPath>
      </BuildOutputInPackage>
    </ItemGroup>    
  </Target>

  <PropertyGroup>
    <_SdkLanguageSourceName Condition="'$(MSBuildProjectExtension)' == '.csproj'">CSharp</_SdkLanguageSourceName>
  </PropertyGroup>
  <Import Condition="'$(TargetFramework)' != ''" Project="$(MSBuildThisFileDirectory)MSBuild.Sdk.Extras\Inference.targets" />
  <Import Condition="'$(TargetFramework)' != ''" Project="$(MSBuildThisFileDirectory)MSBuild.Sdk.Extras\Platforms.targets" />
  <Import Condition="'$(TargetFramework)' != ''" Project="$(MSBuildThisFileDirectory)MSBuild.Sdk.Extras\DefaultItems\ImplicitPackages.targets"/>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" Condition="'$(XenkoProjectType)' != 'Cpp'" />
</Project>
